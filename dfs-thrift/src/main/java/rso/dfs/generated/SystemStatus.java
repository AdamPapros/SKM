package rso.dfs.generated;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SystemStatus implements org.apache.thrift.TBase<SystemStatus, SystemStatus._Fields>, java.io.Serializable, Cloneable, Comparable<SystemStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemStatus");

  private static final org.apache.thrift.protocol.TField FILES_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("filesNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVERS_STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("serversStatuses", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SystemStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SystemStatusTupleSchemeFactory());
  }

  public int filesNumber; // required
  public List<ServerStatus> serversStatuses; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILES_NUMBER((short)1, "filesNumber"),
    SERVERS_STATUSES((short)2, "serversStatuses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILES_NUMBER
          return FILES_NUMBER;
        case 2: // SERVERS_STATUSES
          return SERVERS_STATUSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILESNUMBER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILES_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("filesNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVERS_STATUSES, new org.apache.thrift.meta_data.FieldMetaData("serversStatuses", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerStatus.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemStatus.class, metaDataMap);
  }

  public SystemStatus() {
  }

  public SystemStatus(
    int filesNumber,
    List<ServerStatus> serversStatuses)
  {
    this();
    this.filesNumber = filesNumber;
    setFilesNumberIsSet(true);
    this.serversStatuses = serversStatuses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemStatus(SystemStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.filesNumber = other.filesNumber;
    if (other.isSetServersStatuses()) {
      List<ServerStatus> __this__serversStatuses = new ArrayList<ServerStatus>(other.serversStatuses.size());
      for (ServerStatus other_element : other.serversStatuses) {
        __this__serversStatuses.add(new ServerStatus(other_element));
      }
      this.serversStatuses = __this__serversStatuses;
    }
  }

  public SystemStatus deepCopy() {
    return new SystemStatus(this);
  }

  @Override
  public void clear() {
    setFilesNumberIsSet(false);
    this.filesNumber = 0;
    this.serversStatuses = null;
  }

  public int getFilesNumber() {
    return this.filesNumber;
  }

  public SystemStatus setFilesNumber(int filesNumber) {
    this.filesNumber = filesNumber;
    setFilesNumberIsSet(true);
    return this;
  }

  public void unsetFilesNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESNUMBER_ISSET_ID);
  }

  /** Returns true if field filesNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFilesNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESNUMBER_ISSET_ID);
  }

  public void setFilesNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESNUMBER_ISSET_ID, value);
  }

  public int getServersStatusesSize() {
    return (this.serversStatuses == null) ? 0 : this.serversStatuses.size();
  }

  public java.util.Iterator<ServerStatus> getServersStatusesIterator() {
    return (this.serversStatuses == null) ? null : this.serversStatuses.iterator();
  }

  public void addToServersStatuses(ServerStatus elem) {
    if (this.serversStatuses == null) {
      this.serversStatuses = new ArrayList<ServerStatus>();
    }
    this.serversStatuses.add(elem);
  }

  public List<ServerStatus> getServersStatuses() {
    return this.serversStatuses;
  }

  public SystemStatus setServersStatuses(List<ServerStatus> serversStatuses) {
    this.serversStatuses = serversStatuses;
    return this;
  }

  public void unsetServersStatuses() {
    this.serversStatuses = null;
  }

  /** Returns true if field serversStatuses is set (has been assigned a value) and false otherwise */
  public boolean isSetServersStatuses() {
    return this.serversStatuses != null;
  }

  public void setServersStatusesIsSet(boolean value) {
    if (!value) {
      this.serversStatuses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILES_NUMBER:
      if (value == null) {
        unsetFilesNumber();
      } else {
        setFilesNumber((Integer)value);
      }
      break;

    case SERVERS_STATUSES:
      if (value == null) {
        unsetServersStatuses();
      } else {
        setServersStatuses((List<ServerStatus>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILES_NUMBER:
      return Integer.valueOf(getFilesNumber());

    case SERVERS_STATUSES:
      return getServersStatuses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILES_NUMBER:
      return isSetFilesNumber();
    case SERVERS_STATUSES:
      return isSetServersStatuses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemStatus)
      return this.equals((SystemStatus)that);
    return false;
  }

  public boolean equals(SystemStatus that) {
    if (that == null)
      return false;

    boolean this_present_filesNumber = true;
    boolean that_present_filesNumber = true;
    if (this_present_filesNumber || that_present_filesNumber) {
      if (!(this_present_filesNumber && that_present_filesNumber))
        return false;
      if (this.filesNumber != that.filesNumber)
        return false;
    }

    boolean this_present_serversStatuses = true && this.isSetServersStatuses();
    boolean that_present_serversStatuses = true && that.isSetServersStatuses();
    if (this_present_serversStatuses || that_present_serversStatuses) {
      if (!(this_present_serversStatuses && that_present_serversStatuses))
        return false;
      if (!this.serversStatuses.equals(that.serversStatuses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SystemStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFilesNumber()).compareTo(other.isSetFilesNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilesNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filesNumber, other.filesNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServersStatuses()).compareTo(other.isSetServersStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServersStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serversStatuses, other.serversStatuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SystemStatus(");
    boolean first = true;

    sb.append("filesNumber:");
    sb.append(this.filesNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serversStatuses:");
    if (this.serversStatuses == null) {
      sb.append("null");
    } else {
      sb.append(this.serversStatuses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'filesNumber' because it's a primitive and you chose the non-beans generator.
    if (serversStatuses == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serversStatuses' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SystemStatusStandardSchemeFactory implements SchemeFactory {
    public SystemStatusStandardScheme getScheme() {
      return new SystemStatusStandardScheme();
    }
  }

  private static class SystemStatusStandardScheme extends StandardScheme<SystemStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SystemStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILES_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filesNumber = iprot.readI32();
              struct.setFilesNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVERS_STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.serversStatuses = new ArrayList<ServerStatus>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ServerStatus _elem2;
                  _elem2 = new ServerStatus();
                  _elem2.read(iprot);
                  struct.serversStatuses.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setServersStatusesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFilesNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filesNumber' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SystemStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FILES_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.filesNumber);
      oprot.writeFieldEnd();
      if (struct.serversStatuses != null) {
        oprot.writeFieldBegin(SERVERS_STATUSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.serversStatuses.size()));
          for (ServerStatus _iter3 : struct.serversStatuses)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SystemStatusTupleSchemeFactory implements SchemeFactory {
    public SystemStatusTupleScheme getScheme() {
      return new SystemStatusTupleScheme();
    }
  }

  private static class SystemStatusTupleScheme extends TupleScheme<SystemStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SystemStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.filesNumber);
      {
        oprot.writeI32(struct.serversStatuses.size());
        for (ServerStatus _iter4 : struct.serversStatuses)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SystemStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.filesNumber = iprot.readI32();
      struct.setFilesNumberIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.serversStatuses = new ArrayList<ServerStatus>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          ServerStatus _elem7;
          _elem7 = new ServerStatus();
          _elem7.read(iprot);
          struct.serversStatuses.add(_elem7);
        }
      }
      struct.setServersStatusesIsSet(true);
    }
  }

}

